import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../store';
import { getUserDetailsApi, loginApi, logoutApi, refreshTokenApi, registerApi } from './auth.api';
import { notifications } from '@mantine/notifications';

export interface AuthState {
  loggedIn: boolean;
  accessToken: string;
  user: {
    name: string;
    email: string;
    id: string;
  } | null;
  status: 'idle' | 'loading' | 'failed';
  initals: string;
}

const initialState: AuthState = {
  loggedIn: false,
  accessToken: '',
  user: null,
  status: 'idle',
  initals: 'N/A',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
/* export const incrementAsync = createAsyncThunk('auth/fetchCount', async (amount: number) => {
  const response = await fetchCount(amount);
  // The value we return becomes the `fulfilled` action payload
  return response.data;
}); */

export const registerUser = createAsyncThunk(
  'auth/register',
  async (data: { name: string; email: string; password: string }) => {
    const response = await registerApi(data.name, data.email, data.password);
    return response.data;
  }
);

export const loginUser = createAsyncThunk(
  'auth/login',
  async (data: { email: string; password: string }) => {
    const response = await loginApi(data.email, data.password);
    return response.data;
  }
);

export const logoutUser = createAsyncThunk('auth/logout', async () => {
  const response = await logoutApi();
  return response.data;
});

export const refreshUser = createAsyncThunk('/auth/refresh', async () => {
  const response = await refreshTokenApi();
  return response.data;
});

export const getUserDetails = createAsyncThunk('/auth/getUserDetails', async () => {
  const response = await getUserDetailsApi();
  return response.data;
});

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setAccessToken: (state, action: PayloadAction<string>) => {
      state.accessToken = action.payload;
    },
    /* 
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    }, */
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // register states
      .addCase(registerUser.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(registerUser.fulfilled, (state, action) => {
        state.status = 'idle';
        if (!action.payload.success) {
          notifications.show({
            title: 'Registration Failed',
            message: 'Email already exists',
            autoClose: true,
            color: 'red',
          });
        } else {
          notifications.show({
            title: 'Registration Successful',
            message: 'You can now login!',
            autoClose: true,
            color: 'green',
          });
        }
      })
      .addCase(registerUser.rejected, (state) => {
        state.status = 'failed';
      })

      // login states
      .addCase(loginUser.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(loginUser.fulfilled, (state, action) => {
        state.status = 'idle';
        console.log('action.payload - ', action.payload);
        if (!action.payload.success) {
          notifications.show({
            title: 'Logout Failed',
            message: 'Invalid Credentials',
            autoClose: true,
            color: 'red',
          });
        } else {
          notifications.show({
            title: 'Logout Successful',
            message: 'Enjoy the blogging experience!',
            autoClose: true,
            color: 'green',
          });
          state.user = {
            id: action.payload.data.id,
            name: action.payload.data.name,
            email: action.payload.data.email,
          };
          state.loggedIn = true;
          state.accessToken = action.payload.accessToken;
          sessionStorage.setItem('accessToken', action.payload.accessToken);
          const name = action.payload.data.name.split(' ');
          if (name.length > 1) {
            state.initals = `${name[0][0]}${name[1][0]}`.toUpperCase();
          } else {
            state.initals = `${name[0][0]}${name[0][1]}`.toUpperCase();
          }
        }
      })
      .addCase(loginUser.rejected, (state, action) => {
        state.status = 'failed';
        if (action.error.code === 'ERR_BAD_REQUEST') {
          notifications.show({
            title: 'Logout Failed',
            message: 'Invalid Credentials',
            autoClose: true,
            color: 'red',
          });
        } else {
          notifications.show({
            title: 'Logout Failed',
            message: 'Server Error',
            autoClose: true,
            color: 'red',
          });
        }
      })

      .addCase(refreshUser.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(refreshUser.fulfilled, (state, action) => {
        state.status = 'idle';
        state.accessToken = sessionStorage.getItem('accessToken') || '';
        state.loggedIn = true;
      })
      .addCase(refreshUser.rejected, (state) => {
        state.status = 'failed';
      })

      .addCase(getUserDetails.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getUserDetails.fulfilled, (state, action) => {
        state.status = 'idle';
        state.user = action.payload;
        const name = action.payload.name.split(' ');
        if (name.length > 1) {
          state.initals = `${name[0][0]}${name[1][0]}`.toUpperCase();
        } else {
          state.initals = `${name[0][0]}${name[0][1]}`.toUpperCase();
        }
      })
      .addCase(getUserDetails.rejected, (state) => {
        state.status = 'failed';
      })

      .addCase(logoutUser.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(logoutUser.fulfilled, (state, action) => {
        state.status = 'idle';
        state.accessToken = '';
        state.loggedIn = false;
        state.user = null;
        sessionStorage.clear();
        notifications.show({
          title: 'Logout Successful',
          message: 'See you soon!',
          autoClose: true,
          color: 'green',
        });
      })
      .addCase(logoutUser.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { setAccessToken } = authSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.auth.value)`
// export const selectCount = (state: RootState) => state.auth.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
/* export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState());
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount));
    }
  }; */

export default authSlice.reducer;
